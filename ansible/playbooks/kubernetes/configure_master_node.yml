---
- hosts: kubernetes-master
  become: yes
  gather_facts: false
  vars_files:
  - ../vars/env_variables.yml
  tasks:
    #Hacemos un pull de las imagenes necesarias para kubeadm init
  - name: Pulling images required for setting up a Kubernetes cluster
    shell: kubeadm config images pull
    #Limpiamos posibles configuracion anteriores
  - name: Resetting kubeadm
    shell: kubeadm reset -f
    register: output
    #Instalamos el plugin CNI (Container Network Interface) de kubernetes y definimos la red de los PODs:
  - name: Initializing Kubernetes cluster
    shell: kubeadm init --pod-network-cidr={{cidr_v}}
    register: output
    #Guardamos la salida en el token file. Dicho file ser√° usado sucesivamente para unir los nodos worker
  - name: Storing Logs and Generated token for future purpose.
    local_action: copy content={{ output.stdout }} dest={{ token_file }}
    become: False
   # Autorizamos al usuario root acceder al cluster
  - name: Copying required files
    shell: |
     mkdir -p $HOME/.kube
     sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
     sudo chown $(id -u):$(id -g) $HOME/.kube/config
    #Instalamos la SDN para el cluster
  - name: Install Network Add-on
    command: kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml
    #Instalamos el ingress controller
  - name: Install Ingress Controller
    command:  kubectl apply -f https://raw.githubusercontent.com/haproxytech/kubernetes-ingress/v1.5/deploy/haproxy-ingress.yaml
  # Deslegamos un ingress controller
  - name: Deploying Ingress Controller
    shell: |
     kubectl apply -f https://raw.githubusercontent.com/haproxytech/kubernetes-ingress/v1.5/deploy/haproxy-ingress.yaml
